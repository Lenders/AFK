CREATE OR REPLACE VIEW EVENT_FLUX AS
SELECT 
    'JOIN' AS FLUX_TYPE, 
    C.USER_ID AS SENDER_ID, 
    PSEUDO AS SENDER_NAME,
    C.EVENT_ID AS TARGET_ID, 
    EVENT_NAME AS TARGET_NAME,
    NULL AS FLUX_DATA, 
    UNIX_TIMESTAMP(JOIN_DATE) AS FLUX_DATE 
    FROM COMPETITOR C
    JOIN ACCOUNT A ON C.USER_ID = A.USER_ID
    JOIN EVENT E ON E.EVENT_ID = C.EVENT_ID
UNION
SELECT 
    'MESSAGE' AS FLUX_TYPE, 
    M.USER_ID AS SENDER_ID, 
    PSEUDO AS SENDER_NAME,
    M.EVENT_ID AS TARGET_ID, 
    EVENT_NAME AS TARGET_NAME,
    MESSAGE AS FLUX_DATA, 
    UNIX_TIMESTAMP(EVENT_MESSAGE_DATE) AS FLUX_DATE 
    FROM EVENT_MESSAGE M
    JOIN ACCOUNT A ON A.USER_ID = M.USER_ID
    JOIN EVENT E ON E.EVENT_ID = M.EVENT_ID
UNION 
SELECT 
    'EVENTCREATE' AS FLUX_TYPE, 
    ORGANIZER AS SENDER_ID, 
    PSEUDO AS SENDER_NAME,
    EVENT_ID AS TARGET_ID, 
    EVENT_NAME AS TARGET_NAME,
    NULL AS FLUX_DATA, 
    UNIX_TIMESTAMP(EVENT_DATE) AS FLUX_DATE 
    FROM EVENT
    JOIN ACCOUNT ON USER_ID = ORGANIZER
UNION
SELECT
    'EVENTSTART' AS FLUX_TYPE,
    NULL AS SENDER_ID,
    NULL AS SENDER_NAME,
    EVENT_ID AS TARGET_ID,
    EVENT_NAME AS TARGET_NAME,
    NULL AS FLUX_DATA,
    UNIX_TIMESTAMP(EVENT_START) AS FLUX_DATE
    FROM EVENT
    WHERE EVENT_START < CURRENT_TIMESTAMP
UNION
SELECT
    'EVENTEND' AS FLUX_TYPE,
    NULL AS SENDER_ID,
    NULL AS SENDER_NAME,
    EVENT_ID AS TARGET_ID,
    EVENT_NAME AS TARGET_NAME,
    NULL AS FLUX_DATA,
    UNIX_TIMESTAMP(EVENT_END) AS FLUX_DATE
    FROM EVENT
    WHERE EVENT_END < CURRENT_TIMESTAMP
ORDER BY FLUX_DATE DESC;

CREATE OR REPLACE VIEW PUBLIC_FLUX AS
SELECT * FROM ACCOUNT_FLUX WHERE FLUX_TYPE = 'INSCRIPTION'
UNION
SELECT * FROM EVENT_FLUX WHERE FLUX_TYPE = 'EVENTCREATE'
ORDER BY FLUX_DATE DESC;